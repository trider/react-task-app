{"ast":null,"code":"var _jsxFileName = \"/Users/jonnygold/Code/MVDS/react/react-task-app/src/components/state/Insert.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet nextId = 3;\nconst initialArtists = [{\n  id: 0,\n  name: 'Marta Colvin Andrade'\n}, {\n  id: 1,\n  name: 'Lamidi Olonade Fakeye'\n}, {\n  id: 2,\n  name: 'Louise Nevelson'\n}];\nexport default function Insert() {\n  _s();\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(initialArtists);\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n    // Items before the insertion point:\n    ...artists.slice(0, insertAt),\n    // New item:\n    {\n      id: nextId++,\n      name: name\n    },\n    // Items after the insertion point:\n    ...artists.slice(insertAt)];\n    setArtists(nextArtists);\n    setName('');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Inspiring sculptors:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Insert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: artists.map(artist => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: artist.name\n      }, artist.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(artists)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Insert, \"3VLD38FNolAk9h4QZFKLHahxjOw=\");\n_c = Insert;\nvar _c;\n$RefreshReg$(_c, \"Insert\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","nextId","initialArtists","id","name","Insert","_s","setName","artists","setArtists","handleClick","insertAt","nextArtists","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","map","artist","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/jonnygold/Code/MVDS/react/react-task-app/src/components/state/Insert.js"],"sourcesContent":["import { useState } from 'react';\n\nlet nextId = 3;\nconst initialArtists = [\n  { id: 0, name: 'Marta Colvin Andrade' },\n  { id: 1, name: 'Lamidi Olonade Fakeye'},\n  { id: 2, name: 'Louise Nevelson'},\n];\n\nexport default function Insert() {\n  const [name, setName] = useState('');\n  const [artists, setArtists] = useState(\n    initialArtists\n  );\n\n  function handleClick() {\n    const insertAt = 1; // Could be any index\n    const nextArtists = [\n      // Items before the insertion point:\n      ...artists.slice(0, insertAt),\n      // New item:\n      { id: nextId++, name: name },\n      // Items after the insertion point:\n      ...artists.slice(insertAt)\n    ];\n    setArtists(nextArtists);\n    setName('');\n  }\n\n  return (\n    <>\n      <h1>Inspiring sculptors:</h1>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <button onClick={handleClick}>\n        Insert\n      </button>\n      <ul>\n        {artists.map(artist => (\n          <li key={artist.id}>{artist.name}</li>\n        ))}\n      </ul>\n      <p>{JSON.stringify(artists)}</p>\n    </>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,IAAIC,MAAM,GAAG,CAAC;AACd,MAAMC,cAAc,GAAG,CACrB;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAuB,CAAC,EACvC;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAuB,CAAC,EACvC;EAAED,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAiB,CAAC,CAClC;AAED,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACF,IAAI,EAAEG,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CACpCM,cACF,CAAC;EAED,SAASQ,WAAWA,CAAA,EAAG;IACrB,MAAMC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACpB,MAAMC,WAAW,GAAG;IAClB;IACA,GAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC,EAAEF,QAAQ,CAAC;IAC7B;IACA;MAAER,EAAE,EAAEF,MAAM,EAAE;MAAEG,IAAI,EAAEA;IAAK,CAAC;IAC5B;IACA,GAAGI,OAAO,CAACK,KAAK,CAACF,QAAQ,CAAC,CAC3B;IACDF,UAAU,CAACG,WAAW,CAAC;IACvBL,OAAO,CAAC,EAAE,CAAC;EACb;EAEA,oBACET,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BpB,OAAA;MACEqB,KAAK,EAAEf,IAAK;MACZgB,QAAQ,EAAEC,CAAC,IAAId,OAAO,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFpB,OAAA;MAAQyB,OAAO,EAAEb,WAAY;MAAAI,QAAA,EAAC;IAE9B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTpB,OAAA;MAAAgB,QAAA,EACGN,OAAO,CAACgB,GAAG,CAACC,MAAM,iBACjB3B,OAAA;QAAAgB,QAAA,EAAqBW,MAAM,CAACrB;MAAI,GAAvBqB,MAAM,CAACtB,EAAE;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLpB,OAAA;MAAAgB,QAAA,EAAIY,IAAI,CAACC,SAAS,CAACnB,OAAO;IAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAChC,CAAC;AAEP;AAACZ,EAAA,CAtCuBD,MAAM;AAAAuB,EAAA,GAANvB,MAAM;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}